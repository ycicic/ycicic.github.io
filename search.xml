<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RocketMQの简单使用</title>
    <url>/2020/12/29/rocketMQ/</url>
    <content><![CDATA[<blockquote>
<p>通过Group机制，RocketMQ天然的支持消息负载均衡！</p>
<p>比如某个Topic有9条消息，其中一个Consumer Group有3个实例（3个进程 OR 3台机器），那么每个实例将均摊3条消息！（RocketMQ只有一种模式，即发布订阅模式。）</p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li><p><a href="http://rocketmq.apache.org/dowloading/releases/">下载</a> RocketMQ的 <strong>Binary</strong> 包</p>
</li>
<li><p>解压</p>
</li>
<li><p>配置环境变量 <em>ROCKETMQ_HOME</em> 为 <em>RocketMQ目录</em></p>
</li>
</ul>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><h2 id="启动名称服务-NAMESERVER"><a href="#启动名称服务-NAMESERVER" class="headerlink" title="启动名称服务 NAMESERVER"></a>启动名称服务 <strong>NAMESERVER</strong></h2><ul>
<li><p>cmd进入 <em>RocketMQ目录\bin</em> 下 <code>cd %ROCKETMQ_HOME%\bin</code></p>
</li>
<li><p>启动 <strong>NAMESERVER</strong>  <code>start mqnamesrv.cmd</code></p>
</li>
<li><p>启动成功后的弹窗勿关<br><img src="/image/rocketMQ/nameserver_started.png"></p>
</li>
</ul>
<h2 id="启动-BROKER"><a href="#启动-BROKER" class="headerlink" title="启动 BROKER"></a>启动 <strong>BROKER</strong></h2><ul>
<li><p>cmd进入 <em>RocketMQ目录\bin</em> 下 <code>cd %ROCKETMQ_HOME%\bin</code></p>
</li>
<li><p>启动 <strong>BROKER</strong>  <code>start mqbroker.cmd -n 127.0.0.1:9876</code></p>
<blockquote>
<p>-n 后的参数代表Broker的地址<br>autoCreateTopicEnable设置为true，表示开启Topic自动创建；如果需要开启，执行 <code>start mqbroker.cmd -n 127.0.0.1:9876 autoCreateTopicEnable=true</code> 生产环境中，autoCreateTopicEnable不能设置为true，原因参考 <a href="https://blog.csdn.net/prestigeding/article/details/91476328">https://blog.csdn.net/prestigeding/article/details/91476328</a></p>
</blockquote>
</li>
<li><p>启动成功后的弹窗勿关<br><img src="/image/rocketMQ/broker_started.png"></p>
<blockquote>
<p>成功后会显示Borker的注册地址，创建Topic需要用到</p>
</blockquote>
</li>
</ul>
<h2 id="创建-Topic"><a href="#创建-Topic" class="headerlink" title="创建 Topic"></a>创建 <strong>Topic</strong></h2><ul>
<li><p>cmd进入 <em>RocketMQ目录\bin</em> 下 <code>cd %ROCKETMQ_HOME%\bin</code></p>
</li>
<li><p>创建 <strong>Topic</strong>  <code>mqadmin.cmd updateTopic -n localhost:9876 -b 192.168.12.22:10911 -t demoTopic</code></p>
<blockquote>
<p>-n 后的参数代表Broker的地址；-b 后的参数代表Borker的注册地址；-t 后的参数代表Topic的名字</p>
</blockquote>
</li>
</ul>
<h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="新建一个生产者服务"><a href="#新建一个生产者服务" class="headerlink" title="新建一个生产者服务"></a>新建一个生产者服务</h2><ul>
<li>添加rocketmq依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>创建ProducerService<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DefaultMQProducer producer = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMQProducer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;defaultGroup&quot;</span>);</span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line">        producer.setRetryTimesWhenSendFailed(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            producer.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">send</span><span class="params">(String topic, String tags, String content)</span> </span>&#123;</span><br><span class="line">        Message msg = <span class="keyword">new</span> Message(topic, tags, <span class="string">&quot;&quot;</span>, content.getBytes());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            producer.send(msg);</span><br><span class="line">            System.out.println(<span class="string">&quot;发送消息: &quot;</span> + msg + <span class="string">&quot; -- &quot;</span> + content);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutDownProducer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (producer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            producer.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>创建MessageController<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;message&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProducerService producerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;send&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="meta">@RequestBody</span> String message)</span></span>&#123;</span><br><span class="line">        producerService.send(<span class="string">&quot;demoTopic&quot;</span>,<span class="string">&quot;TAG-A&quot;</span>,message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>此接口模拟发送消息动作</p>
</blockquote>
</li>
</ul>
<h2 id="新建一个消费者服务"><a href="#新建一个消费者服务" class="headerlink" title="新建一个消费者服务"></a>新建一个消费者服务</h2><ul>
<li>添加rocketmq依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>创建ConsumerService<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DefaultMQPushConsumer consumer = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMQConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;GROUP-1&quot;</span>);</span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            consumer.subscribe(<span class="string">&quot;demoTopic&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">            consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                        List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (MessageExt msg : msgs) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;收到消息: &quot;</span> + <span class="keyword">new</span> String(msg.getBody()));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            consumer.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutDownConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (consumer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            consumer.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ul>
<li><p>启动生产者服务</p>
</li>
<li><p>启动多个消费者服务</p>
</li>
<li><p>调用发送消息接口</p>
</li>
<li><p>观察各个消费者服务的控制台</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>RocketMQ</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Cordova-轻松愉快的构建构建混合App</title>
    <url>/2020/12/31/cordova/</url>
    <content><![CDATA[<blockquote>
<p><a href="http://cordova.axuer.com/">Cordova 官方网站</a></p>
<p>使用HTML, CSS &amp; JS进行移动App开发</p>
<p>跨平台重用代码</p>
<p>支持离线场景应用</p>
<p>访问设备原生API</p>
<p>免费开源</p>
</blockquote>
<blockquote>
<p>Cordova的命令行运行在 Node.js 上面,需要已有 <em>Node.js</em> 开发环境</p>
<p>本文以一个 Android App 作为例子讲解，需要已有 <em>Android</em> 开发环境</p>
</blockquote>
<hr>
<h1 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h1><h2 id="Cordova快速入门"><a href="#Cordova快速入门" class="headerlink" title="Cordova快速入门"></a>Cordova快速入门</h2><h3 id="安装Cordova"><a href="#安装Cordova" class="headerlink" title="安装Cordova"></a>安装Cordova</h3><ul>
<li><p>打开命令提示符或终端，然后键入 <code>npm install -g cordova</code> .</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cordova</span><br></pre></td></tr></table></figure>
<h3 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h3></li>
<li><p>键入 <code>cordova create &lt;path&gt;</code> .</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cordova create MyApp</span><br></pre></td></tr></table></figure>
<h3 id="添加一个平台"><a href="#添加一个平台" class="headerlink" title="添加一个平台"></a>添加一个平台</h3></li>
</ul>
<blockquote>
<p>此处使用Android演示,查看自己可以添加的平台可以使用 <code>cordova platform</code> 命令查看</p>
</blockquote>
<ul>
<li><p>导航到项目目录</p>
</li>
<li><p>添加你想构建app的平台，键入 <code>cordova platform add &lt;platform name&gt;</code> .</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd MyApp</span><br><span class="line">cordova platform add android</span><br></pre></td></tr></table></figure>
<h2 id="自定义Cordova插件"><a href="#自定义Cordova插件" class="headerlink" title="自定义Cordova插件"></a>自定义Cordova插件</h2></li>
</ul>
<blockquote>
<p><a href="http://cordova.axuer.com/plugins/">Cordova插件</a></p>
<p>插件就是一些附加代码用来提供原生组件的JavaScript接口，他允许你的App可以使用原生设备的能力，超越了纯粹的Web App。</p>
<p>Cordova本身已经提供了部分插件，本文只对如何自定义插件做一些梳理</p>
</blockquote>
<h3 id="安装plugman"><a href="#安装plugman" class="headerlink" title="安装plugman"></a>安装plugman</h3><ul>
<li><p>键入 <code>npm install -g plugman</code> .</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g plugman</span><br></pre></td></tr></table></figure>
<h3 id="创建插件模板"><a href="#创建插件模板" class="headerlink" title="创建插件模板"></a>创建插件模板</h3></li>
<li><p>键入 <code>plugman create --name &lt;NAME&gt; --plugin_id &lt;PLUGIN_ID&gt; --plugin_version &lt;PLUGIN_VERSION&gt;</code></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugman create --name MyPlugin --plugin_id SimplePlugin --plugin_version 1.0.0</span><br></pre></td></tr></table></figure></li>
<li><p>进入插件目录，键入 <code>cd MyPlugin</code></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd MyPlugin</span><br></pre></td></tr></table></figure></li>
<li><p>为插件增加Android平台 <code>plugman platform add --platform_name android</code></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugman platform add --platform_name android</span><br></pre></td></tr></table></figure>
<p>  生成的插件目录结构为： </p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|MyPlugin</span><br><span class="line">----|src</span><br><span class="line">---------|android</span><br><span class="line">--------------MyPlugin.java</span><br><span class="line">----|www</span><br><span class="line">---------|MyMath.js</span><br><span class="line">----plugin.xml</span><br></pre></td></tr></table></figure>
<h3 id="修改插件模板"><a href="#修改插件模板" class="headerlink" title="修改插件模板"></a>修改插件模板</h3></li>
<li><p>修改 <em>MyPlugin.plugin.xml</em></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">id</span>=<span class="string">&quot;SimplePlugin&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.0.0&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://apache.org/cordova/ns/plugins/1.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>MyPlugin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">js-module</span> <span class="attr">name</span>=<span class="string">&quot;MyPlugin&quot;</span> <span class="attr">src</span>=<span class="string">&quot;www/MyPlugin.js&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">clobbers</span> <span class="attr">target</span>=<span class="string">&quot;cordova.plugins.MyPlugin&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">js-module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">platform</span> <span class="attr">name</span>=<span class="string">&quot;android&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">config-file</span> <span class="attr">parent</span>=<span class="string">&quot;/*&quot;</span> <span class="attr">target</span>=<span class="string">&quot;res/xml/config.xml&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">&quot;MyPlugin&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;android-package&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SimplePlugin.MyPlugin&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">feature</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">config-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">config-file</span> <span class="attr">parent</span>=<span class="string">&quot;/*&quot;</span> <span class="attr">target</span>=<span class="string">&quot;AndroidManifest.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">config-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source-file</span> <span class="attr">src</span>=<span class="string">&quot;src/android/MyPlugin.java&quot;</span> <span class="attr">target-dir</span>=<span class="string">&quot;src/SimplePlugin/MyPlugin&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">platform</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>&lt;clobbers&gt;</code> 标签： 前端工程师使用这个来调用 <em>www/MyMath.js</em> 中的公开方法</p>
<p><code>&lt;feature&gt;</code>标签： 定义服务名</p>
<p><code>&lt;param name=&quot;android-package&quot; value=&quot;SimplePlugin.MyPlugin&quot;/&gt;</code>： 定义此插件在Android平台下的底层实现的 <strong><em>包名.类名</em></strong> ： <strong>SimplePlugin.MyPlugin</strong> </p>
<p><code>&lt;config-file&gt;</code> 标签： 主要用来做权限申明，注册activity、receiver等，对应修改<em>AndroidManifest.xml</em></p>
</blockquote>
<p>  修改文件中的</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">source-file</span> <span class="attr">src</span>=<span class="string">&quot;src/android/MyPlugin.java&quot;</span> <span class="attr">target-dir</span>=<span class="string">&quot;src/SimplePlugin/MyPlugin&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>  为</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">source-file</span> <span class="attr">src</span>=<span class="string">&quot;src/android/MyPlugin.java&quot;</span> <span class="attr">target-dir</span>=<span class="string">&quot;src/SimplePlugin&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改此处是因为编译后 <em>MyPlugin.java</em> 文件会被拷贝到 <strong>src/SimplePlugin/MyPlugin</strong> 目录下，造成 <code>MyPlugin</code> 类的路径和包名路径不一致</p>
</blockquote>
</li>
</ul>
<h3 id="修改插件方法"><a href="#修改插件方法" class="headerlink" title="修改插件方法"></a>修改插件方法</h3><ul>
<li><p>修改 <em>www/MyMath.js</em></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">&#x27;cordova/exec&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.coolMethod = <span class="function"><span class="keyword">function</span> (<span class="params">arg0, success, error</span>) </span>&#123;</span><br><span class="line">    exec(success, error, <span class="string">&#x27;MyPlugin&#x27;</span>, <span class="string">&#x27;coolMethod&#x27;</span>, [arg0]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>此文件声明插件提供的公共方法</p>
<p>exec的参数分别为:</p>
<p><code>success</code>： 成功回调</p>
<p><code>error</code>： 失败回调</p>
<p><code>&#39;MyPlugin&#39;</code>： 服务名（必须和 plugin.xml定义的服务名保持一致）</p>
<p><code>&#39;coolMethod&#39;</code> ： Action 动作名。(底层实现根据Action字符串调用不同的方法)</p>
<p><code>arg0</code>： 参数，必须是数组。可以通过此处使用<code>[]</code>包裹来确保参数为数组，在底层通过获取数组下标为0的数据来取到真正的数据</p>
</blockquote>
<p>  这里使用插件提供 数字的 <strong>相加</strong>、<strong>相减</strong> 两个方法 作为演示，修改代码为</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">&#x27;cordova/exec&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.plus = <span class="function"><span class="keyword">function</span> (<span class="params">args, success, error</span>) </span>&#123;</span><br><span class="line">    exec(success, error, <span class="string">&#x27;MyPlugin&#x27;</span>, <span class="string">&#x27;Plus&#x27;</span>, [args]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.minus = <span class="function"><span class="keyword">function</span> (<span class="params">args, success, error</span>) </span>&#123;</span><br><span class="line">    exec(success, error, <span class="string">&#x27;MyPlugin&#x27;</span>, <span class="string">&#x27;Minus&#x27;</span>, [args]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><h3 id="生成-package-json"><a href="#生成-package-json" class="headerlink" title="生成 package.json"></a>生成 <em>package.json</em></h3><ul>
<li><p>在插件目录键入 <code>plugman createpackagejson .</code></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugman createpackagejson .</span><br></pre></td></tr></table></figure></li>
<li><p>回到工程目录，键入 <code>cd ..</code></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure>
<h3 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h3></li>
<li><p>添加插件到工程中，键入 <code>cordova plugin add MyPlugin</code></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cordova plugin add MyPlugin</span><br></pre></td></tr></table></figure>
<h2 id="编写前端页面"><a href="#编写前端页面" class="headerlink" title="编写前端页面"></a>编写前端页面</h2></li>
</ul>
<h3 id="删除自动生成的代码"><a href="#删除自动生成的代码" class="headerlink" title="删除自动生成的代码"></a>删除自动生成的代码</h3><ul>
<li>删除 <strong>MyApp</strong> 工程下 <em>www</em> 文件夹下创建项目时自动生成的代码</li>
</ul>
<h3 id="编写页面代码"><a href="#编写页面代码" class="headerlink" title="编写页面代码"></a>编写页面代码</h3><ul>
<li><p>编写 <em>index.html</em> </p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;number_1&quot;</span>&gt;</span>数字1： <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;number_1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;number_2&quot;</span>&gt;</span>数字2： <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;number_2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;res&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;plus()&quot;</span>&gt;</span>加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;minus()&quot;</span>&gt;</span>减<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;cordova.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> number1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;number_1&quot;</span>).value</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> number2 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;number_2&quot;</span>).value</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> resSpan = <span class="built_in">document</span>.getElementById(<span class="string">&quot;res&quot;</span>)</span></span><br><span class="line">        cordova.plugins.MyPlugin.plus(</span><br><span class="line">            [number1, number2],</span><br><span class="line">            (res) =&gt; &#123;</span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;成功，Android端返回：&quot;</span> + res)</span></span><br><span class="line">                resSpan.innerText = res</span><br><span class="line">            &#125;,</span><br><span class="line">            (e) =&gt; &#123;</span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;失败，Android端返回：&quot;</span> + e)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">throw</span> e;</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">minus</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> number1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;number_1&quot;</span>).value</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> number2 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;number_2&quot;</span>).value</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> resSpan = <span class="built_in">document</span>.getElementById(<span class="string">&quot;res&quot;</span>)</span></span><br><span class="line">        cordova.plugins.MyPlugin.minus(</span><br><span class="line">            [number1, number2],</span><br><span class="line">            (res) =&gt; &#123;</span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;成功，Android端返回：&quot;</span> + res)</span></span><br><span class="line">                resSpan.innerText = res</span><br><span class="line">            &#125;,</span><br><span class="line">            (e) =&gt; &#123;</span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;失败，Android端返回：&quot;</span> + e)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">throw</span> e;</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h1 id="Android端部分"><a href="#Android端部分" class="headerlink" title="Android端部分"></a>Android端部分</h1><h2 id="导入工程"><a href="#导入工程" class="headerlink" title="导入工程"></a>导入工程</h2><ul>
<li>使用 <strong>Android Studio</strong> 导入 <em>MyApp/platforms/android</em> </li>
</ul>
<h2 id="修改Android代码"><a href="#修改Android代码" class="headerlink" title="修改Android代码"></a>修改Android代码</h2><ul>
<li><p>编辑 <em>MyPlugin.java</em></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> SimplePlugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.cordova.CordovaPlugin;</span><br><span class="line"><span class="keyword">import</span> org.apache.cordova.CallbackContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.json.JSONArray;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONException;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This class echoes a string called from JavaScript.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPlugin</span> <span class="keyword">extends</span> <span class="title">CordovaPlugin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String action, JSONArray args, CallbackContext callbackContext)</span> <span class="keyword">throws</span> JSONException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (action.equals(<span class="string">&quot;coolMethod&quot;</span>)) &#123;</span><br><span class="line">            String message = args.getString(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">this</span>.coolMethod(message, callbackContext);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">coolMethod</span><span class="params">(String message, CallbackContext callbackContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message != <span class="keyword">null</span> &amp;&amp; message.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            callbackContext.success(message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            callbackContext.error(<span class="string">&quot;Expected one non-empty string argument.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  修改为</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> SimplePlugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.cordova.CordovaPlugin;</span><br><span class="line"><span class="keyword">import</span> org.apache.cordova.CallbackContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.json.JSONArray;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONException;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This class echoes a string called from JavaScript.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPlugin</span> <span class="keyword">extends</span> <span class="title">CordovaPlugin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String action, JSONArray args, CallbackContext callbackContext)</span> <span class="keyword">throws</span> JSONException </span>&#123;</span><br><span class="line">        JSONArray jsonArray = args.getJSONArray(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> a = jsonArray.getInt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> b = jsonArray.getInt(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Plus&quot;</span>:</span><br><span class="line">                <span class="keyword">this</span>.plus(a, b, callbackContext);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Minus&quot;</span>:</span><br><span class="line">                <span class="keyword">this</span>.minus(a, b, callbackContext);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, CallbackContext callbackContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = a + b;</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            callbackContext.success(ret);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            callbackContext.error(<span class="string">&quot;两数之和不能大于100&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">minus</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, CallbackContext callbackContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = a - b;</span><br><span class="line">        <span class="keyword">if</span> (ret &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            callbackContext.success(ret);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            callbackContext.error(<span class="string">&quot;减数不能小于被减数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="执行编译"><a href="#执行编译" class="headerlink" title="执行编译"></a>执行编译</h2><ul>
<li>键入 <code>cordova prepare</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cordova prepare</span><br></pre></td></tr></table></figure>
<ul>
<li>在Android IDE工程直接运行</li>
</ul>
<h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><ul>
<li><p>加法–成功</p>
<p> <img src="/image/cordova/plus_success.png"></p>
</li>
<li><p>加法–失败</p>
<p> <img src="/image/cordova/plus_failed.png"></p>
</li>
<li><p>减法–成功</p>
<p> <img src="/image/cordova/minus_success.png"></p>
</li>
<li><p>减法–失败</p>
<p> <img src="/image/cordova/minus_failed.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Android</tag>
      </tags>
  </entry>
</search>
