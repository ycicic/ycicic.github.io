<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RocketMQの简单使用</title>
    <url>/2020/12/29/rocketMQ/</url>
    <content><![CDATA[<blockquote>
<p>通过Group机制，RocketMQ天然的支持消息负载均衡！</p>
<p>比如某个Topic有9条消息，其中一个Consumer Group有3个实例（3个进程 OR 3台机器），那么每个实例将均摊3条消息！（RocketMQ只有一种模式，即发布订阅模式。）</p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li><p><a href="http://rocketmq.apache.org/dowloading/releases/">下载</a> RocketMQ的 <strong>Binary</strong> 包</p>
</li>
<li><p>解压</p>
</li>
<li><p>配置环境变量 <em>ROCKETMQ_HOME</em> 为 <em>RocketMQ目录</em></p>
</li>
</ul>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><h4 id="启动名称服务-NAMESERVER"><a href="#启动名称服务-NAMESERVER" class="headerlink" title="启动名称服务 NAMESERVER"></a>启动名称服务 <strong>NAMESERVER</strong></h4><ul>
<li><p>cmd进入 <em>RocketMQ目录\bin</em> 下 <code>cd %ROCKETMQ_HOME%\bin</code></p>
</li>
<li><p>启动 <strong>NAMESERVER</strong>  <code>start mqnamesrv.cmd</code></p>
</li>
<li><p>启动成功后的弹窗勿关<br><img src="/image/rocketMQ/nameserver_started.png"></p>
</li>
</ul>
<h4 id="启动-BROKER"><a href="#启动-BROKER" class="headerlink" title="启动 BROKER"></a>启动 <strong>BROKER</strong></h4><ul>
<li><p>cmd进入 <em>RocketMQ目录\bin</em> 下 <code>cd %ROCKETMQ_HOME%\bin</code></p>
</li>
<li><p>启动 <strong>BROKER</strong>  <code>start mqbroker.cmd -n 127.0.0.1:9876</code></p>
<blockquote>
<p>-n 后的参数代表Broker的地址<br>autoCreateTopicEnable设置为true，表示开启Topic自动创建；如果需要开启，执行 <code>start mqbroker.cmd -n 127.0.0.1:9876 autoCreateTopicEnable=true</code> 生产环境中，autoCreateTopicEnable不能设置为true，原因参考 <a href="https://blog.csdn.net/prestigeding/article/details/91476328">https://blog.csdn.net/prestigeding/article/details/91476328</a></p>
</blockquote>
</li>
<li><p>启动成功后的弹窗勿关<br><img src="/image/rocketMQ/broker_started.png"></p>
<blockquote>
<p>成功后会显示Borker的注册地址，创建Topic需要用到</p>
</blockquote>
</li>
</ul>
<h4 id="创建-Topic"><a href="#创建-Topic" class="headerlink" title="创建 Topic"></a>创建 <strong>Topic</strong></h4><ul>
<li><p>cmd进入 <em>RocketMQ目录\bin</em> 下 <code>cd %ROCKETMQ_HOME%\bin</code></p>
</li>
<li><p>创建 <strong>Topic</strong>  <code>mqadmin.cmd updateTopic -n localhost:9876 -b 192.168.12.22:10911 -t demoTopic</code></p>
<blockquote>
<p>-n 后的参数代表Broker的地址；-b 后的参数代表Borker的注册地址；-t 后的参数代表Topic的名字</p>
</blockquote>
</li>
</ul>
<h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><h4 id="新建一个SpringBoot服务作为生产者服务"><a href="#新建一个SpringBoot服务作为生产者服务" class="headerlink" title="新建一个SpringBoot服务作为生产者服务"></a>新建一个SpringBoot服务作为生产者服务</h4><ul>
<li>添加rocketmq依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>创建ProducerService<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DefaultMQProducer producer = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMQProducer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;defaultGroup&quot;</span>);</span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line">        producer.setRetryTimesWhenSendFailed(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            producer.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">send</span><span class="params">(String topic, String tags, String content)</span> </span>&#123;</span><br><span class="line">        Message msg = <span class="keyword">new</span> Message(topic, tags, <span class="string">&quot;&quot;</span>, content.getBytes());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            producer.send(msg);</span><br><span class="line">            System.out.println(<span class="string">&quot;发送消息: &quot;</span> + msg + <span class="string">&quot; -- &quot;</span> + content);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutDownProducer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (producer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            producer.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>创建MessageController<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;message&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProducerService producerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;send&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="meta">@RequestBody</span> String message)</span></span>&#123;</span><br><span class="line">        producerService.send(<span class="string">&quot;demoTopic&quot;</span>,<span class="string">&quot;TAG-A&quot;</span>,message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>此接口模拟发送消息动作</p>
</blockquote>
</li>
</ul>
<h4 id="新建一个SpringBoot服务作为消费者服务"><a href="#新建一个SpringBoot服务作为消费者服务" class="headerlink" title="新建一个SpringBoot服务作为消费者服务"></a>新建一个SpringBoot服务作为消费者服务</h4><ul>
<li>添加rocketmq依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>创建ConsumerService<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DefaultMQPushConsumer consumer = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMQConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;GROUP-1&quot;</span>);</span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            consumer.subscribe(<span class="string">&quot;demoTopic&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">            consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                        List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (MessageExt msg : msgs) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;收到消息: &quot;</span> + <span class="keyword">new</span> String(msg.getBody()));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            consumer.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutDownConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (consumer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            consumer.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul>
<li><p>启动生产者服务</p>
</li>
<li><p>启动多个消费者服务</p>
</li>
<li><p>调用发送消息接口</p>
</li>
<li><p>观察各个消费者服务的控制台</p>
</li>
</ul>
]]></content>
      <categories>
        <category>demo</category>
      </categories>
      <tags>
        <tag>RocketMQ</tag>
        <tag>Windows</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
</search>
